#!/usr/bin/env bash
# ███████╗███████╗████████╗████████╗██╗███╗   ██╗ ██████╗ ███████╗
# ██╔════╝██╔════╝╚══██╔══╝╚══██╔══╝██║████╗  ██║██╔════╝ ██╔════╝
# ███████╗█████╗     ██║      ██║   ██║██╔██╗ ██║██║  ███╗███████╗
# ╚════██║██╔══╝     ██║      ██║   ██║██║╚██╗██║██║   ██║╚════██║
# ███████║███████╗   ██║      ██║   ██║██║ ╚████║╚██████╔╝███████║
# ╚══════╝╚══════╝   ╚═╝      ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝
# ███╗   ███╗███████╗███╗   ██╗██╗   ██╗
# ████╗ ████║██╔════╝████╗  ██║██║   ██║
# ██╔████╔██║█████╗  ██╔██╗ ██║██║   ██║  script by furcom
# ██║╚██╔╝██║██╔══╝  ██║╚██╗██║██║   ██║  https://github.com/furcom
# ██║ ╚═╝ ██║███████╗██║ ╚████║╚██████╔╝
# ╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝ ╚═════╝

source $HOME/.config/hypr/scripts/HYPR_VARS

MONITOR=$(hyprctl monitors | grep Monitor | awk '{print $2}')

main_menu() {
    OPTIONS="  Hyprland\n󱂩  Waybar\n󰄛  Kitty\n󰮫  Rofi\n󰵷  Fusuma\n󱘖  Connections\n  Packages\n󰗼  Exit"
    CHOICE=$(echo -e "$OPTIONS" | rofi -dmenu -theme-str 'configuration{show-icons:false;}')

    # Wenn Escape gedrückt wurde oder keine Wahl getroffen wurde, schließen
    if [ -z "$CHOICE" ]; then
        exit 0
    fi

    if [ -z "$CHOICE" ]; then
        main_menu
    elif [ "$CHOICE" == "󰗼  Exit" ]; then
        exit
    else
        case "$CHOICE" in
            #---------- HYPR ----------
            "  Hyprland")
                hyprland_menu ;;
            # ---------- Waybar ----------
            "󱂩  Waybar")
                waybar_menu ;;
            # ---------- Kitty ----------
            "󰄛  Kitty")
                kitty_menu ;;
            # ---------- Rofi ----------
            "󰮫  Rofi")
                rofi_menu ;;
            # ---------- Fusuma ----------
            "󰵷  Fusuma")
                fusuma_menu ;;
            # ---------- Connections ---------
            "󱘖  Connections")
                connections_menu ;;
            # ---------- Updates ---------
            "  Packages")
                packages_menu ;;
            *)
                echo "Invalid choice" ;;
        esac
    fi
}

hyprland_menu() {
    HYPRLAND_OPTIONS="󰸉  Wallpaper\n  General\n  Cursor\n  Bindings\n  Layouts\n  Misc\n  Rules\n  Style\n  Input\n  Plugins\n󰌍  Back"
    HYPRLAND_SUBCHOICE=$(echo -e "$HYPRLAND_OPTIONS" | rofi -dmenu -theme-str 'configuration { show-icons: false; }')

    if [ -z "$HYPRLAND_SUBCHOICE" ]; then
        main_menu
    elif [ "$HYPRLAND_SUBCHOICE" == "󰌍  Back" ]; then
        main_menu
    else
        case "$HYPRLAND_SUBCHOICE" in
            "  General")
                $TERMINAL sh -c "$EDITOR $HyprDir/hyprland.conf" ;;
            "󰸉  Wallpaper")
                wallpaper_menu ;;
            "  Cursor")
                $TERMINAL sh -c "$HyprScriptsDir/cursor" ;;
            "  Bindings")
                $TERMINAL sh -c "$EDITOR $HyprConfigsDir/bindings.conf" ;;
            "  Layouts")
                $TERMINAL sh -c "$EDITOR $HyprConfigsDir/layouts.conf" ;;
            "  Misc")
                $TERMINAL sh -c "$EDITOR $HyprConfigsDir/misc.conf" ;;
            "  Rules")
                $TERMINAL sh -c "$EDITOR $HyprConfigsDir/rules.conf" ;;
            "  Style")
                $TERMINAL sh -c "$EDITOR $HyprConfigsDir/style.conf" ;;
            "  Input")
                $TERMINAL sh -c "$EDITOR $HyprConfigsDir/input.conf" ;;
            "  Plugins")
                $TERMINAL sh -c "$EDITOR $HyprConfigsDir/plugins.conf" ;;
        esac
    fi
}

waybar_menu() {
    WAYBAR_OPTIONS="  Config\n  Style\n󰑓  Restart\n󰌍  Back"
    WAYBAR_SUBCHOICE=$(echo -e "$WAYBAR_OPTIONS" | rofi -dmenu -theme-str 'configuration { show-icons: false; }')

    if [ -z "$WAYBAR_SUBCHOICE" ]; then
        main_menu
    elif [ "$WAYBAR_SUBCHOICE" == "󰌍  Back" ]; then
        main_menu
    else
        case "$WAYBAR_SUBCHOICE" in
            "  Config")
                $TERMINAL sh -c "$EDITOR $WaybarDir/config" ;;
            "  Style")
                $TERMINAL sh -c "$EDITOR $WaybarDir/style.css" ;;
            "󰑓  Restart")
                systemctl --user restart waybar.service ;;
        esac
    fi
}

kitty_menu() {
    KITTY_OPTIONS="  Config\n󰑓  Reload Config\n  Style\n  Keymaps\n󰌍  Back"
    KITTY_SUBCHOICE=$(echo -e "$KITTY_OPTIONS" | rofi -dmenu -theme-str 'configuration { show-icons: false; }')

    if [ -z "$KITTY_SUBCHOICE" ]; then
        main_menu
    elif [ "$KITTY_SUBCHOICE" == "󰌍  Back" ]; then
        main_menu
    else
        case "$KITTY_SUBCHOICE" in
            "  Config")
                $TERMINAL sh -c "$EDITOR $KittyDir/kitty.conf" ;;
            "󰑓  Reload Config")
                kill -SIGUSR1 $(pidof kitty) ;;
            "  Style")
                $TERMINAL sh -c "$EDITOR $KittyConfigsDir/style.conf" ;;
            "  Keymaps")
                $TERMINAL sh -c "$EDITOR $KittyConfigsDir/keymaps.conf" ;;
        esac
    fi
}

rofi_menu() {
    ROFI_OPTIONS="  Config\n  Style\n󰌍  Back"
    ROFI_SUBCHOICE=$(echo -e "$ROFI_OPTIONS" | rofi -dmenu -theme-str 'configuration { show-icons: false; }')

    if [ -z "$ROFI_SUBCHOICE" ]; then
        main_menu
    elif [ "$ROFI_SUBCHOICE" == "󰌍  Back" ]; then
        main_menu
    else
        case "$ROFI_SUBCHOICE" in
            "  Config")
                $TERMINAL sh -c "$EDITOR $RofiDir/config.rasi" ;;
            "  Style")
                $TERMINAL sh -c "$EDITOR $RofiDir/theme.rasi" ;;
        esac
    fi
}

fusuma_menu() {
    FUSUMA_OPTIONS="  Config\n󰑓  Restart\n󰌍  Back"
    FUSUMA_SUBCHOICE=$(echo -e "$FUSUMA_OPTIONS" | rofi -dmenu -theme-str 'configuration { show-icons: false; }')

    if [ -z "$FUSUMA_SUBCHOICE" ]; then
        main_menu
    elif [ "$FUSUMA_SUBCHOICE" == "󰌍  Back" ]; then
        main_menu
    else
        case "$FUSUMA_SUBCHOICE" in
            "  Config")
                $TERMINAL sh -c "$EDITOR $FusumaDir/config.yml" ;;
            "󰑓  Restart")
                pkill fusuma && fusuma -d ;;
        esac
    fi
}

connections_menu() {
    CONNECTIONS_OPTIONS="  Bluetooth\n󰖩  Network\n󰖂  Wireguard\n󰌍  Back"
    CONNECTIONS_SUBCHOICE=$(echo -e "$CONNECTIONS_OPTIONS" | rofi -dmenu -theme-str 'configuration { show-icons: false; }')

    if [ -z "$CONNECTIONS_SUBCHOICE" ]; then
        main_menu
    elif [ "$CONNECTIONS_SUBCHOICE" == "󰌍  Back" ]; then
        main_menu
    else
        case "$CONNECTIONS_SUBCHOICE" in
            "  Bluetooth")
                $TERMINAL sh -c "bluetui" ;;
            "󰖩  Network")
                $TERMINAL sh -c "nmtui" ;;
            "󰖂  Wireguard")
                wireguard_menu ;;
        esac
    fi
}

wireguard_menu() {
    WIREGUARD_OPTIONS="󰌘  Connect\n󰌙  Disconnect\n󰑓  Reconnect\n  Config\n󰌍  Back"
    WIREGUARD_SUBCHOICE=$(echo -e "$WIREGUARD_OPTIONS" | rofi -dmenu -theme-str 'configuration { show-icons: false; }')

    if [ -z "$WIREGUARD_SUBCHOICE" ]; then
        main_menu
    elif [ "$WIREGUARD_SUBCHOICE" == "󰌍  Back" ]; then
        main_menu
    else
        case "$WIREGUARD_SUBCHOICE" in
            "󰌘  Connect")
                $TERMINAL sh -c "echo -e '\n${GREEN}󰌘  Connect Wireguard\n${NC}' && sudo wg-quick up wg0 && systemctl enable wg-quick@wg0" ;;
            "󰌙  Disconnect")
                $TERMINAL sh -c "echo -e '\n${RED}󰌙 Disconnect Wireguard\n${NC}' && sudo wg-quick down wg0 && systemctl disable wg-quick@wg0" ;;
            "󰑓  Reconnect")
                $TERMINAL sh -c "echo -e '\n${YELLOW}󰑓 Reconnect Wireguard\n${NC}' && sudo wg-quick down wg0 && wg-quick up wg0 && systemctl enable wg-quick@wg0" ;;
            "  Config")
                $TERMINAL sh -c "echo -e '\n${CYAN} Edit Wireguard Config\n${NC}' && sudo $EDITOR $WG_CONFIG" ;;
        esac
    fi
}

packages_menu() {
    PACKAGES_OPTIONS="󰮯  Arch Package Updates\n  AUR Package Updates\n󰃢  Clean Pacman\n󰌍  Back"
    PACKAGES_SUBCHOICE=$(echo -e "$PACKAGES_OPTIONS" | rofi -dmenu -theme-str 'configuration { show-icons: false; }')

    if [ -z "$PACKAGES_SUBCHOICE" ]; then
        main_menu
    elif [ "$PACKAGES_SUBCHOICE" == "󰌍  Back" ]; then
        main_menu
    else
        case "$PACKAGES_SUBCHOICE" in
            "󰮯  Arch Package Updates")
                $TERMINAL sh -c "$HyprScriptsDir/packages --pacman" ;;
            "  AUR Package Updates")
                $TERMINAL sh -c "$HyprScriptsDir/packages --aur" ;;
            "󰃢  Clean Pacman")
                $TERMINAL sh -c "$HyprScriptsDir/packages --clean" ;;
        esac
    fi
}

wallpaper_menu() {
    WALLPAPER_OPTIONS=""
    i=1
    for image in $HyprWallpapers/*.{png,jpg,jpeg,svg,webp}; do
        [ -e "$image" ] || continue
        FILENAME=$(basename "$image")
        WALLPAPER_OPTIONS+="󰸉  $FILENAME\n"
        let i++
    done

    WALLPAPER_OPTIONS+="󰌍  Back"
    WALLPAPER_SUBCHOICE=$(echo -e "$WALLPAPER_OPTIONS" | rofi -dmenu -theme-str 'configuration { show-icons: false; }')

    if [ -z "$WALLPAPER_SUBCHOICE" ]; then
        main_menu
    elif [[ $WALLPAPER_SUBCHOICE == 󰸉* ]]; then
        WP_FILE=$(echo "$WALLPAPER_SUBCHOICE" | sed 's/^󰸉  //')
        WP_CHOICE="$HyprWallpapers/$WP_FILE"

        if [ -f "$WP_CHOICE" ]; then
            cp -rf "$WP_CHOICE" "$HyprpaperCacheDir/wallpaper.png"
	    
            # Wallust
	    wallust run "$WP_CHOICE"
            
            # Hyprpaper
            if [ ! -d "$HyprpaperCacheDir" ]; then
                mkdir -p "$HyprpaperCacheDir"
            fi
	    hyprctl hyprpaper unload all
            hyprctl hyprpaper preload "$WP_CHOICE"
            hyprctl hyprpaper wallpaper "$MONITOR, $WP_CHOICE"

            # mako
            pkill mako && mako & > /dev/null
        else
            echo -e "\n${RED}Wallpaper not found.${NC}\n"
        fi
    elif [[ $WALLPAPER_SUBCHOICE == "󰌍  Back" ]]; then
        main_menu
    fi
}

main_menu
